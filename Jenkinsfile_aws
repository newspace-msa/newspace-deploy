pipeline {
    agent any
    environment {
        currentDir = pwd()
        remoteID = "lgcns"
        remoteIP = "172.21.1.22"
        remoteBaseDir = "/home/lgcns/docker"
        mountDir = "${currentDir}/mount"
        separationPhrase = "====================================="
        DOCKER_NICKNAME = "kudong"
        CONFIG_SERVER_IMAGE_NAME = "newspace-config-service"
        BACKEND_USER_IMAGE_NAME = "newspace-user-service"
        BACKEND_NOTICE_IMAGE_NAME = "newspace-notice-service"
        BACKEND_NEWS_IMAGE_NAME = "newspace-news-service"
        FRONTEND_IMAGE_NAME = "newspace-frontend"
        EUREKA_IMAGE_NAME = "newspace-eureka"
        GATEWAY_IMAGE_NAME = "newspace-gateway"
        DEPLOY_NAME = "newspace-deploy"
        TAG = "latest"
        EC2_CONFIG_IP="34.230.80.208"
        EC2_EUREKA_IP="3.82.228.233"
        EC2_DOMAIN_IP="13.218.64.35"
    }
    stages {
        
        stage('Clean Workspace And Docker Images') {
            steps {
                script {
                    deleteDir()  // 워크스페이스 정리
                    echo 'Workspace and Docker Images cleaned'
                    sh """
                        docker image prune -f
                        docker builder prune -a -f
                        echo "Docker images after cleanup:"
                        docker images -a
                    """
                }
            }
        }
        
        stage('Git clone') {
            steps {
                script {
                    parallel(
                        "Clone Config-server": {
                            dir('newspace-config-service') {
                                git branch: 'main', url: 'https://github.com/newspace-msa/newspace-config-service'
                            }
                        },
                        "Clone Backend-News": {
                            dir('newspace-news-service') {
                                git branch: 'main', url: 'https://github.com/newspace-msa/newspace-news-service'
                            }
                        },
                        "Clone Backend-User": {
                            dir('newspace-user-service') {
                                git branch: 'main', url: 'https://github.com/newspace-msa/newspace-user-service'
                            }
                        },
                        "Clone Backend-Notice": {
                            dir('newspace-notice-service') {
                                git branch: 'main', url: 'https://github.com/newspace-msa/newspace-notice-service'
                            }
                        },
                        "Clone Eureka": {
                            dir('newspace-eureka') {
                                git branch: 'main', url: 'https://github.com/newspace-msa/newspace-eureka'
                            }
                        },
                        "Clone Gateway": {
                            dir('newspace-gateway') {
                                git branch: 'main', url: 'https://github.com/newspace-msa/newspace-gateway'
                            }
                        },
                        "Clone Deploy": {
                            dir('newspace-deploy') {
                                git branch: 'main', url: 'https://github.com/newspace-msa/newspace-deploy'
                            }
                        }
                    )
                }
            }
        }
        
        stage('Initial Setup') {
            steps {
                script {
                    echo "${separationPhrase}"
                    echo "Newspace Deploy Process Start......"
                    echo "${separationPhrase}"
                    echo "currentDir = ${currentDir}"
                    echo "mountDir = ${mountDir}"
                    echo "remoteID = ${remoteID}"
                    echo "remoteIP = ${remoteIP}"
                    echo "DOCKER_NICKNAME = ${DOCKER_NICKNAME}"
                    echo "CONFIG_SERVER_IMAGE_NAME = ${CONFIG_SERVER_IMAGE_NAME}"
                    echo "BACKEND_USER_IMAGE_NAME = ${BACKEND_USER_IMAGE_NAME}"
                    echo "BACKEND_NOTICE_IMAGE_NAME = ${BACKEND_NOTICE_IMAGE_NAME}"
                    echo "BACKEND_NEWS_IMAGE_NAME = ${BACKEND_NEWS_IMAGE_NAME}"
                    echo "DEPLOY_NAME = ${DEPLOY_NAME}"
                    echo "TAG = ${TAG}"
                    echo "${separationPhrase}"
                }
            }
        }

        stage('Stop Remote EC2-CONFIG/RABBITMQ') {
            steps {
                echo "Stopping and cleaning Docker on the remote server..."
                sh """
                    ssh -i /var/jenkins_home/aws.pem ubuntu@${EC2_CONFIG_IP} /bin/bash <<'EOT'
                        echo hello world
                """
            }
        }

        stage('Stop Remote EC2-EUREKA/APIGATEWAY') {
            steps {
                echo "Stopping and cleaning Docker on the remote server..."
                sh """
                    ssh -i /var/jenkins_home/aws.pem ubuntu@${EC2_EUREKA_IP} /bin/bash <<'EOT'
                        echo hello world
                """
            }
        }

        stage('Stop Remote EC2-DOMAIN') {
            steps {
                echo "Stopping and cleaning Docker on the remote server..."
                sh """
                    ssh -i /var/jenkins_home/aws.pem ubuntu@${EC2_DOMAIN_IP} /bin/bash <<'EOT'
                        echo hello world
                """
            }
        }

        stage('Build Config server Docker Image') {
            steps {
                echo "Building Eureka Docker image..."
                dir("${currentDir}/${CONFIG_SERVER_IMAGE_NAME}") {
                    sh """
                        chmod +x gradlew
                        ./gradlew clean build -x test
                        docker buildx build --no-cache -t ${CONFIG_SERVER_IMAGE_NAME}:${TAG} .
                    """
                }
            }
        }


        stage('Build Eureka Docker Image') {
            steps {
                echo "Building Eureka Docker image..."
                dir("${currentDir}/${EUREKA_IMAGE_NAME}") {
                    sh """
                        chmod +x gradlew
                        ./gradlew clean build -x test
                        docker buildx build --no-cache -t ${EUREKA_IMAGE_NAME}:${TAG} .
                    """
                }
            }
        }

        stage('Build Gateway Docker Image') {
            steps {
                echo "Building Gateway Docker image..."
                dir("${currentDir}/${GATEWAY_IMAGE_NAME}") {
                    sh """
                        chmod +x gradlew
                        ./gradlew clean build -x test
                        docker buildx build --no-cache -t ${GATEWAY_IMAGE_NAME}:${TAG} .
                    """
                }
            }
        }

        stage('Build Backend User Docker Image') {
            steps {
                echo "Building Backend Docker image..."
                dir("${currentDir}/${BACKEND_USER_IMAGE_NAME}") {
                    sh """
                        chmod +x gradlew
                        ./gradlew clean build -x test
                        docker buildx build -t ${BACKEND_USER_IMAGE_NAME}:${TAG} .
                    """
                }
            }
        }

        stage('Build Backend Notice Docker Image') {
            steps {
                echo "Building Backend Docker image..."
                dir("${currentDir}/${BACKEND_NOTICE_IMAGE_NAME}") {
                    sh """
                        chmod +x gradlew
                        ./gradlew clean build -x test
                        docker buildx build -t ${BACKEND_NOTICE_IMAGE_NAME}:${TAG} .
                    """
                }
            }
        }

        stage('Build Backend News Docker Image') {
            steps {
                echo "Building Backend Docker image..."
                dir("${currentDir}/${BACKEND_NEWS_IMAGE_NAME}") {
                    sh """
                        chmod +x gradlew
                        ./gradlew clean build -x test
                        docker buildx build -t ${BACKEND_NEWS_IMAGE_NAME}:${TAG} .
                    """
                }
            }
        }


        stage('PUSH Docker Images to AWS Private Registry') {
            steps {
                sh """
                    aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 803691999553.dkr.ecr.us-east-1.amazonaws.com
                    
                    docker tag newspace-config-service:latest 803691999553.dkr.ecr.us-east-1.amazonaws.com/mini-project-9/newspace-config-service:latest
                    docker tag newspace-eureka:latest 803691999553.dkr.ecr.us-east-1.amazonaws.com/mini-project-9/newspace-eureka:latest
                    docker tag newspace-gateway:latest 803691999553.dkr.ecr.us-east-1.amazonaws.com/mini-project-9/newspace-gateway:latest
                    docker tag newspace-user-service:latest 803691999553.dkr.ecr.us-east-1.amazonaws.com/mini-project-9/newspace-user-service:latest
                    docker tag newspace-notice-service:latest 803691999553.dkr.ecr.us-east-1.amazonaws.com/mini-project-9/newspace-notice-service:latest
                    docker tag newspace-news-service:latest 803691999553.dkr.ecr.us-east-1.amazonaws.com/mini-project-9/newspace-news-service:latest

                    docker push 803691999553.dkr.ecr.us-east-1.amazonaws.com/mini-project-9/newspace-config-service:latest
                    docker push 803691999553.dkr.ecr.us-east-1.amazonaws.com/mini-project-9/newspace-eureka:latest
                    docker push 803691999553.dkr.ecr.us-east-1.amazonaws.com/mini-project-9/newspace-gateway:latest
                    docker push 803691999553.dkr.ecr.us-east-1.amazonaws.com/mini-project-9/newspace-user-service:latest
                    docker push 803691999553.dkr.ecr.us-east-1.amazonaws.com/mini-project-9/newspace-notice-service:latest
                    docker push 803691999553.dkr.ecr.us-east-1.amazonaws.com/mini-project-9/newspace-news-service:latest

                """
            }
        }

        // stage('Run Containers on AWS EC2-1') {
        //     steps {
                
        //     }
        // }

        // stage('Run Containers on AWS EC2-2') {
        //     steps {
                
        //     }
        // }

        // stage('Run Containers on AWS EC2-3') {
        //     steps {
                
        //     }
        // }
    
    }
}
